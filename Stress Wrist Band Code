
/*
 Stress Wrist Band

  This code collects the interbeat interval (IBI) between heartbeats by reading the Adafruit pulse sensor. The IBI data is then split into three levels that can tell of one's stress level.
  The first level is the low stress level where one is in a normal relaxed state. IBI is high.
  The second level is the medium stress level where heart rate is picking up thereby meaning that there is some sort of stimulus or stress that is causing this increase. IBI is intermediate. 
  The third level is the high stress level where heart rate is high and subject experiences stress. IBI is low. 

  Low Stress Level = IBI >= 500
  Medium Stress Level = 350 < IBI < 500
  High Stress Level = IBI <= 350

  When user's IBI falls into these specific levels, this will cause the NeoPixels on the wrist band to light up with different colours corresponding to different levels.

  Low Stress Level = GREEN
  Medium Stress Level = BLINKING YELLOW
  High Stress Level = RED
  
  Find out more information about this stress wrist band at https://www.instructables.com/id/Stress-Wrist-Band/

  Created 4/29/2020
  By Kay Laura Sindabizera and Michelle Lo

  BME375 Biomedical Instrumentation
  Biosensor Project
  Department of Engineering
  Messiah College 
  
 */

#define USE_ARDUINO_INTERRUPTS true    // Set-up low-level interrupts for most acurate IBI math.
#include <PulseSensorPlayground.h>     // Includes the PulseSensorPlayground Library.   
#include <Adafruit_NeoPixel.h> // Adafruit NeoPixel library
#ifdef __AVR__
#include <avr/power.h>
#endif
#define PIN        6 // Arduino pin that is connected to the NeoPixels
#define NUMPIXELS 3 //  Number of NeoPixels attached to the Flora

// When setting up the NeoPixel library, we tell it how many pixels,
// and which pin to use to send signals. Note that for older NeoPixel
// strips you might need to change the third parameter -- see the
// strandtest example for more information on possible values.
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

#define DELAYVAL 500 // Time (in milliseconds) to pause between pixels

const int PulseWire = 11;       // PulseSensor connected to pin 12 on the board but is coded interchangably with 11
int Threshold = 550;           // Determine which Signal to "count as a beat" and which to ignore.
int pinSwitch = 10;            // Switch is connected to pin 10 on the Flora

// declaring variables to hold the new and old switch states
boolean oldSwitchState = LOW;
boolean newSwitchState = LOW;

PulseSensorPlayground pulseSensor;  // Creates an instance of the PulseSensorPlayground object called "pulseSensor"


void setup() {   
Serial.begin(9600);          
#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
clock_prescale_set(clock_div_1);
#endif
  pinMode(pinSwitch, INPUT);

  pixels.begin(); // INITIALIZE NeoPixel strip object (REQUIRED)

  pulseSensor.analogInput(PulseWire);   
  pulseSensor.setThreshold(Threshold);   
  pinMode(PulseWire, INPUT);

   if (pulseSensor.begin()) { 
   Serial.println("We created a Stress Wrist Band !");  // This prints one time at Arduino power-up,  or on Arduino reset.  
  }
}

void loop() {

//newSwitchState = digitalRead(pinSwitch);
  if ( newSwitchState != oldSwitchState )
  {
    // has the button switch been closed?
    if ( newSwitchState == HIGH )
    {
 int myIBI = pulseSensor.getInterBeatIntervalMs();  // Calls function on our pulseSensor object that returns IBI as an "int".
                                               // "myIBI" hold this IBI value now. 

if (pulseSensor.sawStartOfBeat()) {             
  Serial.println(" Calculating IBI â™¥ ! "); // If test is "true", print a message "a heartbeat happened".
  Serial.print("IBI: ");                        // Print phrase "IBI: " 
  Serial.println(myIBI);                        // Print the value inside of myIBI. 
}
    delay(20);                    
  
  pixels.clear(); // Set all pixel colors to 'off'

  // The first NeoPixel in a strand is #0, second is 1, all the way up
  // to the count of pixels minus one.
  for(int i=0; i<NUMPIXELS; i++) { 

    if (myIBI <= 350){
      pixels.setPixelColor(i, pixels.Color(150, 0, 0));    // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255 // (Red, Green, Blue) // this one lights up red
       pixels.show();   // Send the updated pixel colors to the hardware.
      delay (50);
    }
    
    if (myIBI > 350 && myIBI < 500){
      pixels.setPixelColor(i, pixels.Color(50, 50, 0));    // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255 // (Red, Green, Blue) // this one lights up yellow
      pixels.show();   // Send the updated pixel colors to the hardware.
      delay (10);
    
      pixels.setPixelColor(i, pixels.Color(50, 50, 0));    
      pixels.show();   // Send the updated pixel colors to the hardware.
      delay (10);
    }
    
   if (myIBI >= 500){
     pixels.setPixelColor(i, pixels.Color(0, 150, 0));    // pixels.Color() takes RGB values, from 0,0,0 up to 255,255,255 // (Red, Green, Blue) // this one lights up green
     pixels.show();   // Send the updated pixel colors to the hardware.
     delay (50);
    }
  }
    }
       oldSwitchState = newSwitchState; // changes switch state
    }
    delay(DELAYVAL); 
  }

